package com.example.application.Connector;


import com.example.application.data.entity.Users;
import com.example.application.data.entity.UsersRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/agile_library") // This means URL's start with /agile_library (after Application path)
public class MainController {
    @Autowired // This means to get the bean called usersRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsersRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam String email,
            @RequestParam String phone,
            @RequestParam String street,
            @RequestParam String postal_code,
            @RequestParam String city,
            @RequestParam Double socialNo,
            @RequestParam String password,
            @RequestParam boolean loancard,
            @RequestParam int role
            ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Users n = new Users();
        n.setFirst_name(firstName);
        n.setLast_name(lastName);
        n.setEmail(email);
        n.setPhone(phone);
        n.setStreet(street);
        n.setPostal_code(postal_code);
        n.setCity(city);
        n.setSocialNo(socialNo);
        n.setPassword(password);
        n.setLoancard(loancard);
        n.setRole_id(role);
        userRepository.save(n);
        return "Saved" + firstName + " " + lastName + " as a user!";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Users> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}